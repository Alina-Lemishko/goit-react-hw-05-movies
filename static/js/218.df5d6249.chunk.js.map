{"version":3,"file":"static/js/218.df5d6249.chunk.js","mappings":"wSAEaA,EAAUC,EAAAA,GAAAA,QAAH,uEAKPC,EAAOD,EAAAA,GAAAA,GAAH,4JASJE,EAAOF,EAAAA,GAAAA,GAAH,0OAWJG,EAAMH,EAAAA,GAAAA,IAAH,qFAMHI,EAAQJ,EAAAA,GAAAA,GAAH,sF,8HCAlB,EAxBkB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,yBACE,SAAC,KAAD,UACGF,EAAOG,KAAI,SAAAC,GAAE,OACZ,SAAC,KAAD,WACE,UAAC,KAAD,CAASC,GAAE,kBAAaD,EAAGE,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,WACE,SAAC,KAAD,CACEQ,IAAG,0CAAqCL,EAAGM,aAC3CC,IAAKP,EAAGQ,SAEV,SAAC,KAAD,UAAQR,EAAGQ,YANJR,EAAGE,c,UCoC1B,EAhDmB,SAAC,GAAkC,IAAhCO,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAC9B,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4CF,EAAAA,EAAAA,UAAS,IAArD,eAAOG,EAAP,KAAuBC,EAAvB,KAuBA,OAVAC,EAAAA,EAAAA,YAAU,WACe,OAAnBN,IAIJO,EAAAA,EAAAA,IAAoBP,GACjBQ,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBJ,EAAkBI,MACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,cACnC,CAACd,KAGF,gCACE,kBAAMD,SAvBe,SAAAgB,GACvBA,EAAEC,iBAEFjB,EAASG,GACTC,EAAe,KAmBb,WACE,4BACE,kBACEc,KAAK,OACLC,MAAOhB,EACPiB,SArBgB,SAAAJ,GACxBZ,EAAeY,EAAEK,OAAOF,MAAMG,SAqBtBC,UAAQ,OAGZ,mBAAQL,KAAK,SAAb,uBAGkB,OAAnBjB,GACC,SAAC,EAAD,CAAWd,OAAQkB,KAEnB,qE,6KC7CFmB,EAAU,mCAEHC,EAAsB,WACjC,OAAOC,IAAAA,IAAA,kEAC2DF,IAC/Df,MAAK,qBAAGkB,SAGAC,EAAkB,SAAAnC,GAC7B,OAAOiC,IAAAA,IAAA,6CACiCjC,EADjC,oBAC+C+B,EAD/C,qBAKIhB,EAAsB,SAAAqB,GACjC,OAAOH,IAAAA,IAAA,4DAEkDF,EAFlD,yBAE0EK,EAF1E,yBAIJpB,MAAK,qBAAGkB,SAGAG,EAAmB,SAAArC,GAC9B,OAAOiC,IAAAA,IAAA,6CAEmCjC,EAFnC,4BAEyD+B,EAFzD,2BAIJf,MAAK,qBAAGkB,SAGAI,EAAmB,SAAAtC,GAC9B,OAAOiC,IAAAA,IAAA,6CAEmCjC,EAFnC,4BAEyD+B,EAFzD,2BAIJf,MAAK,qBAAGkB","sources":["components/MoviesListHome/HomePage.styled.js","components/MovieView/MovieView.js","components/pages/MoviesPage.js","services/ApiFetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 10px;\n  padding-bottom: 20px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin-right: -32px;\n  margin-bottom: -32px;\n  margin-right: -16px;\n`;\n\nexport const Card = styled.li`\n  position: relative;\n  padding-bottom: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n  transition: transform 0.5s linear;\n  width: calc(100% / 5 - 16px);\n  margin-right: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const Img = styled.img`\n  width: 250px;\n  overflow: hidden;\n  border-radius: 5px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 5px;\n  font-size: 20px;\n  line-height: 1.2;\n`;\n","import PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport {\n  Card,\n  Img,\n  List,\n  Title,\n} from 'components/MoviesListHome/HomePage.styled';\n\nconst MovieView = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <ul>\n        <List>\n          {movies.map(el => (\n            <Card key={el.id}>\n              <NavLink to={`/movies/${el.id}`} state={{ from: location }}>\n                <Img\n                  src={`https://image.tmdb.org/t/p/w500/${el.poster_path}`}\n                  alt={el.title}\n                />\n                <Title>{el.title}</Title>\n              </NavLink>\n            </Card>\n          ))}\n        </List>\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieView;\n\nMovieView.propTypes = {\n  movies: PropTypes.array,\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieView from 'components/MovieView';\nimport { fetchMoviesBySearch } from 'services/ApiFetch';\n\nconst MoviesPage = ({ onSubmit, queryForSearch }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    onSubmit(searchQuery);\n    setSearchQuery('');\n  };\n\n  const handleValueChange = e => {\n    setSearchQuery(e.target.value.trim());\n  };\n\n  useEffect(() => {\n    if (queryForSearch === null) {\n      return;\n    }\n\n    fetchMoviesBySearch(queryForSearch)\n      .then(({ results }) => setMoviesBySearch(results))\n      .catch(error => console.log(error.message));\n  }, [queryForSearch]);\n\n  return (\n    <section>\n      <form onSubmit={handleSubmitForm}>\n        <label>\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={handleValueChange}\n            required\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {queryForSearch !== null ? (\n        <MovieView movies={moviesBySearch} />\n      ) : (\n        <h2>You can find the movies by keywords</h2>\n      )}\n    </section>\n  );\n};\n\nexport default MoviesPage;\n\nMoviesPage.propTypes = {\n  queryForSearch: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n","import axios from 'axios';\n\nconst API_KEY = 'e7e97d56d25ec1e4b049a81d5db4fb3b';\n\nexport const fetchTrendingMovies = () => {\n  return axios\n    .get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`)\n    .then(({ data }) => data);\n};\n\nexport const fetchMoviesById = id => {\n  return axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const fetchMoviesBySearch = query => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&page=1&query=${query}&include_adult=false`\n    )\n    .then(({ data }) => data);\n};\n\nexport const fetchReviewsById = id => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .then(({ data }) => data);\n};\n\nexport const fetchCreditsById = id => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .then(({ data }) => data);\n};\n"],"names":["Section","styled","List","Card","Img","Title","movies","location","useLocation","map","el","to","id","state","from","src","poster_path","alt","title","onSubmit","queryForSearch","useState","searchQuery","setSearchQuery","moviesBySearch","setMoviesBySearch","useEffect","fetchMoviesBySearch","then","results","catch","error","console","log","message","e","preventDefault","type","value","onChange","target","trim","required","API_KEY","fetchTrendingMovies","axios","data","fetchMoviesById","query","fetchReviewsById","fetchCreditsById"],"sourceRoot":""}